generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Gender {
    M
    F
    OTHER
}

enum TransactionType {
    SPEND
    INCOME
}

model User {
    id          String    @id @default(uuid()) @db.Uuid
    username    String    @db.VarChar(255)
    userLevel   Int       @default(1)
    email       String    @unique @db.VarChar(256)
    password    String    @db.VarChar(255)
    avatar      String?   @db.VarChar(256)
    gender      Gender    @default(OTHER)
    dateOfBirth DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
    isDeleted   Boolean   @default(false)

    // Relations
    userTransactions UserTransaction[]
    refreshTokens    RefreshToken[]

    @@map("user")
}

model UserTransaction {
    id            String @id @default(uuid()) @db.Uuid
    userId        String @db.Uuid
    transactionId String @db.Uuid

    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

    @@unique([userId, transactionId])
    @@map("user_transaction")
}

model Transaction {
    id              String          @id @default(uuid()) @db.Uuid
    type            TransactionType
    amount          Decimal         @db.Decimal(15, 2)
    currency        String          @db.Char(3)
    transactionDate DateTime
    description     String?         @db.VarChar(256)
    createdAt       DateTime        @default(now())
    updatedAt       DateTime        @updatedAt
    deletedAt       DateTime?
    isDeleted       Boolean         @default(false)

    // Relations
    userTransactions    UserTransaction[]
    transactionCategory TransactionCategory[]

    @@map("transaction")
}

model TransactionCategory {
    id            String @id @default(uuid()) @db.Uuid
    transactionId String @db.Uuid
    categoryId    String @db.Uuid

    transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
    category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@map("transaction_category")
}

model Category {
    id        String   @id @default(uuid()) @db.Uuid
    name      String   @db.VarChar(100)
    createdAt DateTime @default(now())

    // Relations
    transactionCategory TransactionCategory[]

    @@map("category")
}

model RefreshToken {
    id         String   @id @default(uuid()) @db.Uuid
    userId     String   @db.Uuid
    tokenHash  String   @unique @db.VarChar(255)
    expiresAt  DateTime
    deviceInfo String?  @db.VarChar(255)
    ipAddress  String?  @db.VarChar(45)
    isRevoked  Boolean  @default(false)
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("refresh_token")
}
